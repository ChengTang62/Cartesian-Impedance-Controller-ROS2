<?xml version="1.0" ?>
<launch>

<!-- 
<remap from="/franka_control/error_recovery/cancel" to="/CartesianImpedance_trajectory_controller/franka_control/error_recovery/cancel"/>
<remap from="/franka_control/error_recovery/feedback" to="CartesianImpedance_trajectory_controller/franka_control/error_recovery/feedback"/>
<remap from="/franka_control/error_recovery/goal" to="/CartesianImpedance_trajectory_controller/franka_control/error_recovery/goal"/>
<remap from="/franka_control/error_recovery/result" to="/CartesianImpedance_trajectory_controller/franka_control/error_recovery/result"/>
<remap from="/franka_control/error_recovery/status" to="/CartesianImpedance_trajectory_controller/franka_control/error_recovery/status"/>
<remap from="/franka_control/set_load" to="/CartesianImpedance_trajectory_controller/franka_control/set_load"/>
<remap from="/franka_control/set_EE_frame" to="/CartesianImpedance_trajectory_controller/franka_control/set_EE_frame"/>
<remap from="/franka_control/set_K_frame" to="/CartesianImpedance_trajectory_controller/franka_control/set_K_frame"/>
<remap from="/franka_control/set_force_torque_collision_behavior" to="/CartesianImpedance_trajectory_controller/franka_control/set_force_torque_collision_behavior" />
<remap from="/franka_control/set_user_stop" to="/CartesianImpedance_trajectory_controller/franka_control/set_user_stop"/>
-->

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="worlds/empty.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="true"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>



 
    <!-- Robot Customization -->
    <arg name="arm_id"      default="panda" doc="Name of the panda robot to spawn" />
  <arg name="use_gripper" default="true"  doc="Should a franka hand be mounted on the flange?" />
  <arg name="x"           default="0"     doc="How far forward to place the base of the robot in [m]?" />
  <arg name="y"           default="0"     doc="How far leftwards to place the base of the robot in [m]?" />
  <arg name="z"           default="0"     doc="How far upwards to place the base of the robot in [m]?" />
  <arg name="roll"        default="0"     doc="How much to rotate the base of the robot around its X-axis in [rad]?" />
  <arg name="pitch"       default="0"     doc="How much to rotate the base of the robot around its Y-axis in [rad]?" />
  <arg name="yaw"         default="0"     doc="How much to rotate the base of the robot around its Z-axis in [rad]?" />
  <arg name="xacro_args"  default=""      doc="Additional arguments to pass to panda.urdf.xacro" />
  <arg name="initial_joint_positions"
       doc="Initial joint configuration of the panda. Specify as a list of name/value pairs in form of '-J [name-of-joint] [value-in-rad]'. Default is a 90 degree bend in the elbow"
       default="-J $(arg arm_id)_joint1 0
                -J $(arg arm_id)_joint2 -0.785398163
                -J $(arg arm_id)_joint3 0
                -J $(arg arm_id)_joint4 -2.35619449
                -J $(arg arm_id)_joint5 0
                -J $(arg arm_id)_joint6 1.57079632679
                -J $(arg arm_id)_joint7 0.785398163397
                -J $(arg arm_id)_finger_joint1 0.001
                -J $(arg arm_id)_finger_joint2 0.001"
       />
       
       
         <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
         command="xacro $(find franka_description)/robots/panda/panda.urdf.xacro
                  gazebo:=true
                  hand:=$(arg use_gripper)
                  arm_id:=$(arg arm_id)
                  xyz:='$(arg x) $(arg y) $(arg z)'
                  rpy:='$(arg roll) $(arg pitch) $(arg yaw)'
                  $(arg xacro_args)">
  </param>
         <rosparam file="$(find franka_gazebo)/config/franka_hw_sim.yaml" subst_value="true" />
       <param name="m_ee" value="0.76" if="$(arg use_gripper)" />
        <arg name="unpause" value="$(eval '' if arg('paused') else '-unpause')" />
        <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model panda -param robot_description $(arg unpause) $(arg initial_joint_positions)"/>





  <!-- ros_control-->
  <!--<group ns="/CartesianImpedance_trajectory_controller">-->
	<include file="$(find cartesian_impedance_controller)/launch/control_test_4.launch">
            <arg name="arm_id" value="$(arg arm_id)" />
	    <arg name="use_gripper" value="$(arg use_gripper)" />
        </include>
  <!-- </group>-->


</launch>

