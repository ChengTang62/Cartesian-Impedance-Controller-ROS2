#!/usr/bin/env python

from copy import copy
import sys
import rospy

import actionlib

from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint

class TrajectoryClient(object):
    def __init__(self, robot_name):
        #create our action server clients
        self._client = actionlib.SimpleActionClient(
            robot_name + '/PositionJointInterface_trajectory_controller/follow_joint_trajectory',
            FollowJointTrajectoryAction)

        #verify joint trajectory action servers are available
        server_up = self._client.wait_for_server(rospy.Duration(10.0))
        if not server_up:
            msg = ("Action server not available."
                   " Verify action server availability.")
            rospy.logerr(msg)
            rospy.signal_shutdown(msg)
            sys.exit(1)
        #create our goal request
        self._goal = FollowJointTrajectoryGoal()

        # Timing offset to prevent gripper playback before trajectory has started
        self._slow_move_offset = 0.0
        self._trajectory_start_offset = rospy.Duration(0.0)
        self._trajectory_actual_offset = rospy.Duration(0.0)

        #param namespace
        self._param_ns = '/rsdk_joint_trajectory_action_server/'

    def set_joint_names(self, names):
        self._goal.trajectory.joint_names = names

    def clear_points(self):
        self._goal.trajectory.points = list()

    def add_point(self, positions, time):
        """
        Appends trajectory with new point
        @param positions: joint positions
        @param time: time from start for point in seconds
        """
        #creates a point in trajectory with time_from_start and positions
        point = JointTrajectoryPoint()
        point.positions = copy(positions)
        point.time_from_start = rospy.Duration(time)
        self._goal.trajectory.points.append(point)

    def _feedback(self, data):
        # Test to see if the actual playback time has exceeded
        # the move-to-start-pose timing offset
        print data.error.positions[0]
        if (data.actual.time_from_start >= self._trajectory_start_offset):
            pass
            #self._set_trajectory_flag(value=True)
            #self._trajectory_actual_offset = data.actual.time_from_start

    def start(self):
        """
        Sends FollowJointTrajectoryAction request
        """
        self._client.send_goal(self._goal, feedback_cb=self._feedback)
        while not rospy.is_shutdown() and not self.succeeded():
            try:
                rospy.sleep(0.05)
            except:
                break

    def shutdown(self):
        if (self._client.get_state() == actionlib.GoalStatus.ACTIVE):
            print "Shutdowm requested. Stopping action."
            self._client.cancel_goal()

    def succeeded(self):
        return self._client.get_state() == actionlib.GoalStatus.SUCCEEDED

if __name__ == "__main__":
    if len(sys.argv)<2:
        print "usage: send_trajectory <robot_name>"
    else:
        rospy.init_node("test_send_trajectory")
        robot_name = sys.argv[1]
        joint_names = []
        for i in range(1, 8):
            joint_names.append("{}_joint_{}".format(robot_name, i))
        client = TrajectoryClient(robot_name)
        rospy.on_shutdown(client.shutdown)
        client.set_joint_names(joint_names)
        client.add_point([0.5, 0, 0, 0, 0, 0, 0], 0.5)
        client.add_point([1.0, 0, 0, 0, 0, 0, 0], 1.0)
        client.start()
        if client.succeeded():
            print "Action 1 completed succesfully."
        else:
            exit
        client.clear_points()
        client.add_point([0.5, 0, 0, 0, 0, 0, 0], 0.5)
        client.add_point([0.0, 0, 0, 0, 0, 0, 0], 1.0)
        client.start()
        if client.succeeded():
            print "Action 2 completed succesfully."

